[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python']
on_i = 1
hook_add = '''
 " 補完のコマンドmapping
let g:jedi#completions_command = "<leader>p"
let g:jedi#use_tabs_not_buffers = 1
" 補完の時に一番上の選択肢が自動的に選ばれないようにする
let g:jedi#popup_select_first = 0
" jediでは非同期で遅いため.で補完を始めない
let g:jedi#popup_on_dot = 0
let g:jedi#documentation_command = "<leader>k"
" previewを非表示
autocmd FileType python setlocal completeopt-=preview
let g:syntastic_python_checkers = ["flake8"] 
'''

# [[plugins]]
# repo = 'Shougo/unite.vim'
# depends = ['neomru.vim', 'neoyank.vim']
# on_cmd = ['Unite']
# hook_add = '''
#  " unite prefix key.
# nnoremap [unite] <Nop>
# nmap <Space>u [unite]
# " unite general settings
# " insert modeで開始
# " let g:unite_enable_start_insert = 1
# " 最近開いたファイル履歴の保存数
# let g:unite_source_file_mru_limit = 50
# " file_mruの表示フォーマットを指定。空にすると表示スピードが高速化される
# let g:unite_source_file_mru_ilename_format = ''
# " yank/pasteを有効にする
# let g:unite_source_history_yank_enable = 1
# " 現在開いているファイルのディレクトリ下のファイル一覧。
# " 開いていない場合はカレントディレクトリ
# nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
# " バッファ一覧
# nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
# " レジスタ一覧
# nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
# " 最近使用したファイル一覧
# nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
# " ブックマーク一覧
# nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
# " ブックマークに追加
# nnoremap <silent> [unite]a :<C-u>UniteBookmarkAdd<CR>
# " registerからpaste
# nnoremap <silent> [unite]y :<C-u>Unite history/yank<CR> 
# " uniteを開いている間のキーマッピング
# autocmd FileType unite call s:unite_my_settings()
# function! s:unite_my_settings()"{{{
#     " deleteを有効にする
#     call unite#custom#alias('file', 'delete', 'vimfiler__delete')
#     " ESCでuniteを終了
#     nmap <buffer> <ESC> <Plug>(unite_exit)
#     " 入力モードのときjjでノーマルモードに移動
#     imap <buffer> jj <Plug>(unite_insert_leave)
#     " ctrl+uで上位dirに移動
#     imap <buffer> <C-u> <Plug>(unite_delete_backward_path)
#     nmap <buffer> <C-u> <Plug>(unite_delete_backward_path)
#     " shift+jで縦に分割して開く
#     nnoremap <silent> <buffer> <expr> <S-j> unite#do_action('below')
#     inoremap <silent> <buffer> <expr> <S-j> unite#do_action('below')
#     " shift+kで縦に分割して開く
#     nnoremap <silent> <buffer> <expr> <S-k> unite#do_action('above')
#     inoremap <silent> <buffer> <expr> <S-k> unite#do_action('above')
#     " shift+lで横に分割して開く
#     nnoremap <silent> <buffer> <expr> <S-l> unite#do_action('right')
#     inoremap <silent> <buffer> <expr> <S-l> unite#do_action('right')
#     " shift+hで横に分割して開く
#     nnoremap <silent> <buffer> <expr> <S-h> unite#do_action('left')
#     inoremap <silent> <buffer> <expr> <S-h> unite#do_action('left')
#     " shift+oでその場所に開く
#     nnoremap <silent> <buffer> <expr> <S-o> unite#do_action('open')
#     inoremap <silent> <buffer> <expr> <S-o> unite#do_action('open')
#     " shift+rでrenameする
#     nnoremap <silent> <buffer> <expr> <S-r> unite#do_action('rename')
#     inoremap <silent> <buffer> <expr> <S-r> unite#do_action('rename')
# endfunction"}}}
# '''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_add = '''
if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
endif
let g:deoplete#enable_at_startup = 1
let g:python3_host_prog = '/usr/bin/python3'
'''

[[plugins]]
repo ='cespare/vim-toml'
on_ft =['toml']

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = ['help']

[[plugins]]
repo = 'voithos/vim-python-matchit'
on_ft = ['python']

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['python']
hook_add = '''
" 表示に関する設定
let g:airline#extensions#ale#open_lnum_symbol = '('
let g:airline#extensions#ale#close_lnum_symbol = ')'
let g:ale_echo_msg_format = '[%linter%]%code: %%s'
highlight link ALEErrorSign Tag
highlight link ALEWarningSign StorageClass
" Shift + kで次の指摘へ、Shift + jで前の指摘へ移動
nmap <silent> <S-k> <Plug>(ale_previous_wrap)
nmap <silent> <S-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = ['python']
hook_add = '''
" let g:deoplete#sources#jedi#python_path = $HOME . '/anaconda3/envs/RL/bin/python3'
let g:deoplete#sources#jedi#extra_path = ['/usr/bin/python3']
let g:deoplete#sources#jedi#server_timeout=100
let g:deoplete#sources#jedi#statement_length=100
" jedi本体の補完は切る（deoplete-jediで非同期処理をしてくれるため）
let g:jedi#completions_enabled = 0
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_add = '''
"Shift+jにターゲットジャンプ割当
imap <S-j> <Plug>(neosnippet_expand_or_jump)
smap <S-j> <Plug>(neosnippet_expand_or_jump)
xmap <S-j> <Plug>(neosnippet_expand_target)
" if has('conceal')
"   set conceallevel=2 concealcursor=niv
" endif
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim', 'neoyank.vim']
on_cmd = ['Denite']
hook_add = '''
" denite prefix key.
nnoremap [denite] <Nop>
nmap <Space>f [denite]

" deniteを開いている間のキーマッピング
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings()"{{{
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
    " shift+kでhorizontal分割して開く
    nnoremap <silent> <buffer> <expr> <S-k> denite#do_map('do_action', 'split')
    inoremap <silent> <buffer> <expr> <S-k> denite#do_map('do_action', 'split')
    " shift+hでvertical分割して開く
    nnoremap <silent> <buffer> <expr> <S-h> denite#do_map('do_action', 'vsplit')
    inoremap <silent> <buffer> <expr> <S-h> denite#do_map('do_action', 'vsplit')
endfunction"}}}

" let s:denite_default_options = {
"     \ 'prompt': '$ ',
"     \ 'direction': 'top',
"     \ }
" let s:denite_option_array = []
" for [s:key, s:value] in items(s:denite_default_options)
"   call add(s:denite_option_array, '-'.s:key.'='.s:value)
" endfor

" denite general settings
" insert modeで開始
" let g:denite_enable_start_insert = 1
" 最近開いたファイル履歴の保存数
let g:denite_source_file_mru_limit = 50
" yank/pasteを有効にする
let g:denite_source_history_yank_enable = 1
" 現在開いているファイルのディレクトリ下のファイル一覧。
" 開いていない場合はカレントディレクトリ
nnoremap <silent> [denite]f :<C-u>DeniteBufferDir -buffer-name=files file<CR>
" バッファ一覧
nnoremap <silent> [denite]b :<C-u>Denite buffer<CR>
" 最近使用したファイル一覧
nnoremap <silent> [denite]m :<C-u>Denite file_mru<CR>
" registerからpaste
nnoremap <silent> [denite]y :<C-u>Denite history/yank<CR> 

" grep
command! -nargs=? Dgrep call s:Dgrep(<f-args>)
function s:Dgrep(...)
  if a:0 > 0
    execute(':Denite -no-empty -buffer-name=grep-buffer-denite grep -path='.a:1)
  else
    execute(':Denite -no-empty -buffer-name=grep-buffer-denite grep')
    " execute(':Denite -no-empty -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').' grep')
  endif
endfunction

" show Denite grep results
command! Dresume execute(':Denite -resume -buffer-name=grep-buffer-denite')
" command! Dresume execute(':Denite -resume -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').'')
" next Denite grep result
command! Dnext execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately')
" command! Dnext execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately '.join(s:denite_option_array, ' ').'')
" previous Denite grep result
command! Dprev execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately')
" command! Dprev execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately '.join(s:denite_option_array, ' ').'')

" -buffer-name=
nnoremap <silent> [denite]g :<C-u>Dgrep
" <CR>
" Denite grep検索結果を再表示する
nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=grep-buffer-denite<CR>
" nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').'<CR>
" resumeした検索結果の次の行の結果へ飛ぶ
nnoremap <silent> [denite]n :<C-u>Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately<CR>
" nnoremap <silent> [denite]n :<C-u>Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately '.join(s:denite_option_array, ' ').'<CR>
" resumeした検索結果の前の行の結果へ飛ぶ
nnoremap <silent> [denite]p :<C-u>Denite -resume -buffer-name=grep-buffer-denite  -cursor-pos=-1 -immediately<CR>
" nnoremap <silent> [denite]p :<C-u>Denite -resume -buffer-name=grep-buffer-denite  -cursor-pos=-1 -immediately '.join(s:denite_option_array, ' ').'<CR>

'''

hook_post_source = '''
call denite#custom#option('_', {
    \ 'prompt': '$ ',
    \ 'direction': 'top',
    \ })
" call denite#custom#option('default', s:denite_default_options)
call denite#custom#var('file/rec', 'command',
    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
    \ [ '.git/', '.ropeproject/', '__pycache__/',
    \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
" Ag command on grep source
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])
'''
