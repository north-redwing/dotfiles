#-------------------- 
# SHOUGO-SAN'S
#-------------------- 
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim', 'neoyank.vim']
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord']
hook_add = '''
" denite prefix key.
nnoremap [denite] <Nop>
nmap <Space>f [denite]

" deniteを開いている間のキーマッピング
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings()"{{{
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> <leader>cc
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
    " shift+kでhorizontal分割して開く
    nnoremap <silent> <buffer> <expr> <S-k> denite#do_map('do_action', 'split')
    inoremap <silent> <buffer> <expr> <S-k> denite#do_map('do_action', 'split')
    " shift+hでvertical分割して開く
    nnoremap <silent> <buffer> <expr> <S-h> denite#do_map('do_action', 'vsplit')
    inoremap <silent> <buffer> <expr> <S-h> denite#do_map('do_action', 'vsplit')
endfunction"}}}

" denite general settings
" 最近開いたファイル履歴の保存数
let g:denite_source_file_mru_limit = 50
" 現在開いているファイルのディレクトリ下のファイル一覧。
" 開いていない場合はカレントディレクトリ
nnoremap <silent> [denite]f :<C-u>DeniteBufferDir -buffer-name=files file<CR>
" バッファ一覧
nnoremap <silent> [denite]b :<C-u>Denite buffer<CR>
" 最近使用したファイル一覧
nnoremap <silent> [denite]m :<C-u>Denite file_mru<CR>
" registerからpaste
nnoremap <silent> [denite]y :<C-u>Denite neoyank<CR> 

" grep
command! -nargs=? DGrep call s:DGrep(<f-args>)
function s:DGrep(...)
  if a:0 > 0
    execute(':Denite -no-empty -buffer-name=grep-buffer-denite grep -path='.a:1)
  else
    execute(':Denite -no-empty -buffer-name=grep-buffer-denite grep')
  endif
endfunction

" grep cursor word
command! -nargs=? DGrepCursorWord call s:DGrepCurdorWord(<f-args>)
function s:DGrepCurdorWord(...)
  if a:0 > 0
    execute(':DeniteCurorWord -no-empty -buffer-name=grep-buffer-denite -post-action=jump grep -path='.a:1)
  else
    execute(':DeniteCursorWord -no-empty -buffer-name=grep-buffer-denite -post-action=jump grep')
  endif
endfunction

" show Denite grep results
command! DResume execute(':Denite -resume -buffer-name=grep-buffer-denite')
" next Denite grep result
command! DNext execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately')
" previous Denite grep result
command! DPrev execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately')

" -buffer-name=
nnoremap <silent> [denite]g :<C-u>DGrep<CR>
" -buffer-name=
nnoremap <silent> [denite]c :<C-u>DGrepCursorWord<CR>
" Denite grep検索結果を再表示する
nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=grep-buffer-denite<CR>
" resumeした検索結果の次の行の結果へ飛ぶ
nnoremap <silent> [denite]n :<C-u>Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately<CR>
" resumeした検索結果の前の行の結果へ飛ぶ
nnoremap <silent> [denite]p :<C-u>Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately<CR>
'''
hook_post_source = '''
call denite#custom#option('_', {
    \ 'prompt': '$ ',
    \ 'direction': 'top',
    \ 'vertical_preview': v:true,
    \ 'preview_width': &columns / 2,
    \ 'winheight': &lines / 5,
    \ })
" For ripgrep
if executable('rg')
    " Note: rg is faster than ag
    call denite#custom#var('file/rec', 'command',
    \ ['rg', '--files', '--glob', '!.git', '--color', 'never'])
    " Ripgrep command on grep source
    call denite#custom#var('grep', {
    \ 'command': ['rg'],
    \ 'default_opts': ['-i', '--vimgrep', '--no-heading'],
    \ 'recursive_opts': [],
    \ 'pattern_opt': ['--regexp'],
    \ 'separator': ['--'],
    \ 'final_opts': [],
    \ })
" For ag
elseif executable('ag')
    " Change file/rec command.
    call denite#custom#var('file/rec', 'command',
    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    " Ag command on grep source
    call denite#custom#var('grep', {
        \ 'command': ['ag'],
        \ 'default_opts': ['-i', '--vimgrep'],
        \ 'recursive_opts': [],
        \ 'pattern_opt': [],
        \ 'separator': ['--'],
        \ 'final_opts': [],
        \ })
endif
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_add = '''
if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
endif
let g:deoplete#enable_at_startup = 1
let g:python3_host_prog = '/usr/bin/python3'
" defaultの20ms遅延より早く補完されるようにする
let g:auto_complete_delay = 5
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_add = '''
" Shift+jにターゲットジャンプ割当
imap <S-j> <Plug>(neosnippet_expand_or_jump)
smap <S-j> <Plug>(neosnippet_expand_or_jump)
xmap <S-j> <Plug>(neosnippet_expand_target)
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''

#-------------------- 
# PYTHON
#-------------------- 
[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python']
on_i = 1
hook_add = '''
let g:jedi#use_tabs_not_buffers = 1
" 補完の時に一番上の選択肢が自動的に選ばれないようにする
let g:jedi#popup_select_first = 0
" jediは非同期で遅いため.で補完を始めない
let g:jedi#popup_on_dot = 0
" previewを非表示
autocmd FileType python setlocal completeopt-=preview
let g:syntastic_python_checkers = ["flake8"] 

" NOTE: subject to change!
let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>a"
let g:jedi#goto_stubs_command = "<leader>s"
" let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#documentation_command = "<leader>k"
let g:jedi#usages_command = "<leader>u"
let g:jedi#completions_command = "<leader>p"
let g:jedi#rename_command = "<leader>r"
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = ['python']
hook_add = '''
let g:deoplete#sources#jedi#python_path = $HOME . '/anaconda3/envs/RL/bin/python3'
let g:deoplete#sources#jedi#extra_path = ['/usr/bin/python3']
let g:deoplete#sources#jedi#server_timeout=100
let g:deoplete#sources#jedi#statement_length=100
" jedi本体の補完は切る（deoplete-jediで非同期処理をしてくれるため）
let g:jedi#completions_enabled = 0
'''

[[plugins]]
repo = 'voithos/vim-python-matchit'
on_ft = ['python']

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python']

[[plugins]]
repo = 'bps/vim-textobj-python'
on_ft = ['python']

[[plugins]]
repo = 'kana/vim-textobj-user'
sources = ['bps/vim-textobj-python']

#-------------------- 
# OTHERS
#-------------------- 
[[plugins]]
repo ='cespare/vim-toml'
on_ft =['toml']

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = ['help']

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['python']
hook_add = '''
" 表示に関する設定
let g:airline#extensions#ale#open_lnum_symbol = '('
let g:airline#extensions#ale#close_lnum_symbol = ')'
let g:ale_echo_msg_format = '[%linter%]%code: %%s'
highlight link ALEErrorSign Tag
highlight link ALEWarningSign StorageClass
" Shift + kで次の指摘へ、Shift + jで前の指摘へ移動
nmap <silent> <S-k> <Plug>(ale_previous_wrap)
nmap <silent> <S-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'kana/vim-smartinput'
on_i = 1
