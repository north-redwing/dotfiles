#-------------------- 
# SHOUGO-SAN'S
#-------------------- 
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim', 'neoyank.vim']
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord']
hook_add = '''
" denite prefix key.
nnoremap [denite] <Nop>
nmap <Space>f [denite]
tmap <Space>f <ESC>[denite]

" deniteを開いている間のキーマッピング
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings()"{{{
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> <leader>cc
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
    " shift+kでhorizontal分割して開く
    nnoremap <silent> <buffer> <expr> <S-k> denite#do_map('do_action', 'split')
    inoremap <silent> <buffer> <expr> <S-k> denite#do_map('do_action', 'split')
    " shift+hでvertical分割して開く
    nnoremap <silent> <buffer> <expr> <S-h> denite#do_map('do_action', 'vsplit')
    inoremap <silent> <buffer> <expr> <S-h> denite#do_map('do_action', 'vsplit')
endfunction"}}}

" denite general settings
" 最近開いたファイル履歴の保存数
let g:denite_source_file_mru_limit = 50
" 現在開いているファイルのディレクトリ下のファイル一覧。
" 開いていない場合はカレントディレクトリ
nnoremap <silent> [denite]bf :<C-u>DeniteBufferDir -buffer-name=files file<CR>
" バッファ一覧
nnoremap <silent> [denite]b :<C-u>Denite buffer<CR>
" 最近使用したファイル一覧
nnoremap <silent> [denite]m :<C-u>Denite file_mru<CR>
" registerからpaste
nnoremap <silent> [denite]y :<C-u>Denite neoyank<CR> 

" grep
command! -nargs=? DGrep call s:DGrep(<f-args>)
function s:DGrep(...)
  if a:0 > 0
    execute(':Denite -no-empty -buffer-name=grep-buffer-denite grep -path='.a:1)
  else
    execute(':Denite -no-empty -buffer-name=grep-buffer-denite grep')
  endif
endfunction

" grep cursor word
command! -nargs=? DGrepCursorWord call s:DGrepCurdorWord(<f-args>)
function s:DGrepCurdorWord(...)
  if a:0 > 0
    execute(':DeniteCurorWord -no-empty -buffer-name=grep-buffer-denite -post-action=jump grep -path='.a:1)
  else
    execute(':DeniteCursorWord -no-empty -buffer-name=grep-buffer-denite -post-action=jump grep')
  endif
endfunction

" show Denite grep results
command! DResume execute(':Denite -resume -buffer-name=grep-buffer-denite')
" next Denite grep result
command! DNext execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately<CR>')
" previous Denite grep result
command! DPrev execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately<CR>')

" -buffer-name=
nnoremap <silent> [denite]g :<C-u>DGrep<CR>
" -buffer-name=
nnoremap <silent> [denite]c :<C-u>DGrepCursorWord<CR>
" Denite grep検索結果を再表示する
nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=grep-buffer-denite<CR>
" resumeした検索結果の次の行の結果へ飛ぶ
nnoremap <silent> [denite]n :<C-u>Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately<CR>
" resumeした検索結果の前の行の結果へ飛ぶ
nnoremap <silent> [denite]p :<C-u>Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately<CR>
'''
hook_post_source = '''
" float windowを使わない設定
" call denite#custom#option('_', {
"     \ 'prompt': '$ ',
"     \ 'direction': 'top',
"     \ 'vertical_preview': v:true,
"     \ 'preview_width': &columns / 2,
"     \ 'winheight': &lines / 5,
"     \ })

" float windowを使う設定
call denite#custom#option('_', {
    \ 'cached_filter': v:true,
    \ 'cursor_shape': v:true,
    \ 'cursor_wrap': v:true,
    \ 'floating_preview': v:true,
    \ 'highlight_filter_background': 'DeniteFilter',
    \ 'highlight_matched_char': 'Directory',
    \ 'highlight_matched_range': 'PreProc',
    \ 'match_highlight': v:true,
    \ 'max_dynamic_update_candidates': 100000,
    \ 'prompt': '$ ',
    \ 'split': has('nvim') ? 'floating_relative_cursor' : 'horizontal',
    \ 'winwidth': 120,
    \ 'winheight': 15,
    \ 'preview_width': 120,
    \ })
    " \ 'vertical_preview': v:true,

function! s:denite_detect_size() abort
  let s:denite_winheight = 20
  let s:denite_winrow = &lines > s:denite_winheight ? (&lines - s:denite_winheight) / 2 : 0
  let s:denite_winwidth = &columns > 240 ? &columns / 2 : 120
  let s:denite_wincol = &columns > s:denite_winwidth ? (&columns - s:denite_winwidth) / 2 : 0
  call denite#custom#option('_', {
        \ 'wincol': s:denite_wincol,
        \ 'winheight': s:denite_winheight,
        \ 'winrow': s:denite_winrow,
        \ 'winwidth': s:denite_winwidth,
        \ })
endfunction
augroup denite-detect-size
  autocmd!
  autocmd VimResized * call <SID>denite_detect_size()
augroup END
call s:denite_detect_size()

" For ripgrep
if executable('rg')
    " Note: rg is faster than ag
    call denite#custom#var('file/rec', 'command',
    \ ['rg', '--files', '--glob', '!.git', '--color', 'never'])
    " Ripgrep command on grep source
    call denite#custom#var('grep', {
    \ 'command': ['rg'],
    \ 'default_opts': ['-i', '--vimgrep', '--no-heading'],
    \ 'recursive_opts': [],
    \ 'pattern_opt': ['--regexp'],
    \ 'separator': ['--'],
    \ 'final_opts': [],
    \ })
" For ag
elseif executable('ag')
    " Change file/rec command.
    call denite#custom#var('file/rec', 'command',
    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    " Ag command on grep source
    call denite#custom#var('grep', {
        \ 'command': ['ag'],
        \ 'default_opts': ['-i', '--vimgrep'],
        \ 'recursive_opts': [],
        \ 'pattern_opt': [],
        \ 'separator': ['--'],
        \ 'final_opts': [],
        \ })
endif
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = ['unite.vim', 'denite.nvim']

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# on_i = 1
# hook_add = '''
# if !has('nvim')
#     call dein#add('roxma/nvim-yarp')
#     call dein#add('roxma/vim-hug-neovim-rpc')
# endif
# let g:deoplete#enable_at_startup = 1
# let g:python3_host_prog = '/usr/bin/python3'
# " defaultの20ms遅延より早く補完されるようにする
# let g:auto_complete_delay = 1
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# on_i  = 1
# on_ft = ['snippet']
# depends = ['neosnippet-snippets']
# hook_add = '''
# " Shift+jでターゲットジャンプ
# imap <S-j> <Plug>(neosnippet_expand_or_jump)
# smap <S-j> <Plug>(neosnippet_expand_or_jump)
# xmap <S-j> <Plug>(neosnippet_expand_target)
# if has('conceal')
#   set conceallevel=2 concealcursor=niv
# endif
# '''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap [defx] <Nop>
nmap <Space>ff [defx]
tmap <Space>ff <ESC>[defx]
" defx.nvimを起動
nnoremap [defx] :<C-u>Defx<CR>

let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 2
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ defx#do_action('open')
    " ファイルを開く
    nnoremap <silent><buffer><expr> open
    \ defx#do_action('open')
    " ウィンドウを水平分割してファイルを開く
    nnoremap <silent><buffer><expr> sp
    \ defx#do_action('open', 'split')
    " ウィンドウを垂直分割してファイルを開く
    nnoremap <silent><buffer><expr> vp
    \ defx#do_action('open', 'vsplit')
    " ファイルをコピーする
    nnoremap <silent><buffer><expr> cp
    \ defx#do_action('copy')
    " ファイルを移動する
    nnoremap <silent><buffer><expr> mv
    \ defx#do_action('move')
    " ファイルを貼り付ける
    nnoremap <silent><buffer><expr> P
    \ defx#do_action('paste')
    " 新しいファイルを作成する
    nnoremap <silent><buffer><expr> touch
    \ defx#do_action('new_file')
    " 新しいディレクトリを作成する
    nnoremap <silent><buffer><expr> mkdir
    \ defx#do_action('new_directory')
    " ファイルを削除する
    nnoremap <silent><buffer><expr> rm
    \ defx#do_action('remove')
    " ファイル名を変更する
    nnoremap <silent><buffer><expr> rename
    \ defx#do_action('rename')
    " ツリーを表示/非表示する
    nnoremap <silent><buffer><expr> t
    \ defx#do_action('open_or_close_tree')
    " ファイルを実行する
    nnoremap <silent><buffer><expr> exec
    \ defx#do_action('execute_system')
    " ファイル/ディレクトリのパスをコピーする
    nnoremap <silent><buffer><expr> yy
    \ defx#do_action('yank_path')
    " 隠しファイルを表示/非表示する
    nnoremap <silent><buffer><expr> .
    \ defx#do_action('toggle_ignored_files')
    " 親ディレクトリに移動する
    noremap <silent><buffer><expr> up
    \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
    " ホームディレクトリに移動する
    \ defx#do_action('cd')
    " defx.nvimを終了する
    nnoremap <silent><buffer><expr> <Esc> 
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> q
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <leader>q
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> exit
    \ defx#do_action('quit')
    " カーソルを下に移動する
    nnoremap <silent><buffer><expr> j
    \ line('.') == line('$') ? 'gg' 
    " カーソルを上に移動する
    nnoremap <silent><buffer><expr> k
    \ line('.') == 1 ? 'G' : 'k'
    " Neovim上のカレントディレクトリを変更する
    nnoremap <silent><buffer><expr> cd
    \ defx#do_action('change_vim_cwd')
    " fileをpreviewする
    nnoremap <silent><buffer><expr> p
    \ defx#do_action('preview')
endfunction
'''
hook_post_source = '''
call defx#custom#option('_', {
    \ 'columns': 'indent:git:icons:filename',
    \ 'show_ignored_files': 1,
    \ 'split': 'floating',
    \ 'winwidth': 120,
    \ 'winheight': 15,
    \ 'preview_width': 120,
    \ 'floating_preview': v:true,
    \ 'resume': v:true,
    \ })
    " \ 'vertical_preview': v:true,
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = ['Deol']
hook_add = '''
nnoremap [deol] <Nop>
nmap <Space>ft [deol]
nnoremap [deol] :<C-u>Deol -split=floating -winwidth=120 -winheight=25<CR>
'''
hook_post_source = '''
let g:deol#custom_map = {
    \ 'edit': 'e',
    \ 'start_insert': 'i',
    \ 'start_insert_first': 'I',
    \ 'start_append': 'a',
    \ 'start_append_last': 'A',
    \ 'execute_line': '<CR>',
    \ 'previous_prompt': '<C-p>',
    \ 'next_prompt': '<C-n>',
    \ 'paste_prompt': '<C-y>',
    \ 'bg': '<C-z>',
    \ 'quit': 'q',
    \ }
'''

#-------------------- 
# PYTHON
#-------------------- 
# [[plugins]]
# repo = 'davidhalter/jedi-vim'
# on_ft = ['python']
# on_i = 1
# hook_add = '''
# let g:jedi#use_tabs_not_buffers = 1
# " 補完の時に一番上の選択肢が自動的に選ばれないようにする
# let g:jedi#popup_select_first = 0
# " jediは非同期で遅いため.で補完を始めない
# let g:jedi#popup_on_dot = 0
# " previewを非表示
# autocmd FileType python setlocal completeopt-=preview
# let g:syntastic_python_checkers = ["flake8"] 
# 
# " NOTE: subject to change!
# let g:jedi#goto_command = "<leader>d"
# let g:jedi#goto_assignments_command = "<leader>a"
# let g:jedi#goto_stubs_command = "<leader>s"
# " let g:jedi#goto_definitions_command = "<leader>d"
# let g:jedi#documentation_command = "<leader>k"
# let g:jedi#usages_command = "<leader>u"
# let g:jedi#completions_command = "<leader>p"
# let g:jedi#rename_command = "<leader>r"
# '''
# 
# [[plugins]]
# repo = 'zchee/deoplete-jedi'
# on_ft = ['python']
# hook_add = '''
# let g:deoplete#sources#jedi#python_path = $HOME . '/anaconda3/envs/RL/bin/python3'
# let g:deoplete#sources#jedi#extra_path = ['/usr/bin/python3']
# let g:deoplete#sources#jedi#server_timeout=100
# let g:deoplete#sources#jedi#statement_length=100
# " jedi本体の補完は切る（deoplete-jediで非同期処理をしてくれるため）
# let g:jedi#completions_enabled = 0
# '''

[[plugins]]
repo = 'voithos/vim-python-matchit'
on_ft = ['python']

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python']

[[plugins]]
repo = 'bps/vim-textobj-python'
on_ft = ['python']

[[plugins]]
repo = 'kana/vim-textobj-user'
on_ft = ['python']
sources = ['bps/vim-textobj-python']

#-------------------- 
# OTHERS
#-------------------- 
[[plugins]]
repo ='cespare/vim-toml'
on_ft =['toml']

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = ['help']

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['python']
hook_add = '''
" 表示に関する設定
let g:airline#extensions#ale#open_lnum_symbol = '('
let g:airline#extensions#ale#close_lnum_symbol = ')'
let g:ale_echo_msg_format = '[%linter%]%code: %%s'
highlight link ALEErrorSign Tag
highlight link ALEWarningSign StorageClass
" Shift + kで次の指摘へ、Shift + jで前の指摘へ移動
nmap <silent> <S-k> <Plug>(ale_previous_wrap)
nmap <silent> <S-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_source = 'call config#init#coc#hook_source()'
hook_post_source = '''
"LightLineにcoc.nvimのステータスを載せます
let g:lightline = {
  \'active': {
    \'right': [
      \['coc']
    \]
  \},
  \'component_function': {
    \'coc': 'coc#status'
  \}
\}

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
" set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

"Diagnosticsの、左横のアイコンの色設定
highlight CocErrorSign ctermfg=15 ctermbg=196
highlight CocWarningSign ctermfg=0 ctermbg=172

nmap <silent> <leader>l :<C-u>CocList<cr>
nmap <silent> <leader>df <Plug>(coc-definition)
nmap <silent> <leader>rf <Plug>(coc-references)
nmap <silent> <leader>rn <Plug>(coc-rename)
nmap <silent> <leader>fmt <Plug>(coc-format)
" nmap <silent> <leader>h :<C-u>call CocAction('doHover')<cr>
nmap <silent> <leader>h :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'
'''
